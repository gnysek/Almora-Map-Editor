using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Runtime.InteropServices;
using System.Xml;

namespace MapEditor.Common
{
	public static class Manager
	{
		public static ProjectData Project = null;
		public static MapEditorMain MainWindow = null;

        public static List<string> recentFiles = null;

        public static void setup()
        {
            recentFiles = new List<string>();

            try
            {
                XmlDocument XMLfile = new XmlDocument(); 
                XMLfile.Load(Application.StartupPath + "\\settings.xml");
                XmlNode root = XMLfile.SelectSingleNode("settings/recent");
                foreach (XmlNode n in root)
                {
                    recentFiles.Add(n.InnerText);
                }
            }
            catch (Exception)
            {
                saveSettings();
            }
        }

        public static void saveSettings()
        {
            XmlDocument file = new XmlDocument();
            XmlComment comment = file.CreateComment("This Document is generated by Awesome Map Editor, if you edit it by hand then you do so at your own risk!");
            XmlElement settings = file.CreateElement("settings");

            foreach (string path in recentFiles)
            {
                XmlElement elem = file.CreateElement("recent");
                elem.InnerText = path;
                settings.AppendChild(elem);
            }

            file.AppendChild(comment);
            file.AppendChild(settings);
            file.Save(Application.StartupPath + "\\settings.xml");
        }

		public static void saveProject()
		{
			if (Project == null)
			{
				MessageBox.Show("ProjectData isn't loaded yet");
				return;
			}

			//XMLFormatter xml = new XMLFormatter();
		}

		public static bool newProject(string filename)
		{
			return loadProject(filename, false);
		}

		public static bool loadProject(string filename)
		{
			return loadProject(filename, true);
		}

		public static bool dropProject()
		{
			Project = null;
			return true;
		}

		public static bool loadProject(string filename, bool load)
		{
			if (Project != null)
			{
				MessageBox.Show("Please close your project first!");
				return false;
			}

            if (recentFiles.IndexOf(filename) == -1)
            {
                if (recentFiles.Count > 5)
                {
                    recentFiles.RemoveAt(5);
                }
            }
            else
            {
                recentFiles.RemoveAt(recentFiles.IndexOf(filename));

            }
            recentFiles.Insert(0, filename);
            saveSettings();

            /*Project =*/
			new ProjectData(filename, load);
			return true;
		}

		public static GMRoom Room
		{
			get { return (Project == null) ? null : Project.Room; }
		}

		[DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = false)]
		private static extern Int32 SendMessage(IntPtr hwnd, Int32 wMsg, Int32 wParam, Int32 lParam);
		const int LVM_FIRST = 0x1000;
		const int LVM_SETICONSPACING = LVM_FIRST + 53;

		public static void SetSpacing(ListView listView, Int16 x, Int16 y)
		{
			SendMessage(listView.Handle, LVM_SETICONSPACING, 0, x * 65536 + y);
			listView.Refresh();
		}


	}
}
