using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Xml;
using System.Windows.Forms;
using System.Xml.Linq;
using MapEditor.Components;
using MapEditor.Graphics;
using System.Drawing;
using MapEditor.Forms;
using System.Collections.ObjectModel;
using System.Globalization;

namespace MapEditor.Common
{
    public class ProjectData
    {
        public string ProjectFilename = "";
        public string GmxFilename = "";
        public string ProjectSource = "";
        public bool Saved = false;
        public bool Loaded = false;
        private GmsRoom _Room = null;
        private GmsObject _Instance = null;
        private GmsRoomInstance _HighlightedInstance = null;
        private GmsRoomInstance _SelectedInstance = null;
        //public List<PlaceableElement> PlaceableList = new List<PlaceableElement>();
        //public List<MapRoom> RoomList = new List<MapRoom>();
        //public List<GMSpriteData> GMXSprites = new List<GMSpriteData>();
        //public List<GMObjectData> GMXObjects = new List<GMObjectData>();
        public ObservableCollection<BrushGroup> BrushGroups = new ObservableCollection<BrushGroup>();
        public ObservableCollection<MapLayers> RoomLayers = new ObservableCollection<MapLayers>();

        //public List<GmsRoom> GMRooms = new List<GmsRoom>();
        //public GMItem allItems = null;
        public string defaultPlaceable = "oEnvMain";

        #region Magical Properties

        public GmsRoom Room
        {
            get { return _Room; }
            set
            {
                _Room = value;
                if (GmsResourceObjectList.Count > 0)
                {
                    Instance = GmsResourceObjectList[0];
                }
                regenerateLayerList();
            }
        }

        public GmsObject Instance
        {
            get { return (_Room == null) ? null : _Instance; }
            set { _Instance = (_Room == null) ? null : value; }
        }

        public GmsRoomInstance HighlightedInstance
        {
            get { return (_Room == null) ? null : _HighlightedInstance; }
            set { _HighlightedInstance = value; }
        }

        public GmsRoomInstance SelectedInstance
        {
            get { return (_Room == null) ? null : _SelectedInstance; }
            set
            {
                _SelectedInstance = value;
                Manager.MainWindow.brushPlaceableUpdatePositionAndRotation();
            }
        }

        #endregion

        // in case we load new project from GMX only
        public ProjectData(string srcPath)
        {
            createNewProject(srcPath, false);
        }

        // in case that we loading existing project
        public ProjectData(string srcPath, bool load)
        {
            createNewProject(srcPath, load);
        }

        public bool createNewProject(string sourcePath, bool load)
        {
            //resetUsedRes();
            ProjectSource = Path.GetDirectoryName(sourcePath);

            Manager.Project = this;

            if (load) // load existing
            {
                ProjectFilename = Path.GetFileName(sourcePath);
                GmxFilename = Path.GetFileNameWithoutExtension(ProjectFilename) + ".gmx";
                _readGMX();
                if (Manager.Project != null)
                {
                    _readAME();
                    //_checkForRegisteredRes(allItems.getSubitems());
                }
            }
            else
            {
                GmxFilename = Path.GetFileName(sourcePath);
                ProjectFilename = Path.GetFileNameWithoutExtension(GmxFilename) + ".ame";
                _readGMX();
            }

            regenerateEnvDefList();
            regenerateRoomList();
            regenerateTextureList();
            regenerateLayerList();
            regenerateBrushList();

            return true;
        }

        public bool saveProjectToXML()
        {
            string path;
            path = Path.GetDirectoryName(ProjectSource);

            XmlDocument file = new XmlDocument();
            XmlComment comment = file.CreateComment("This Document is generated by Awesome Map Editor, if you edit it by hand then you do so at your own risk!");
            XmlElement assets = file.CreateElement("assets");
            XmlElement options = file.CreateElement("options");

            List<XmlElement> optionsElements = new List<XmlElement>();

            options.AppendChild(_addXmlElement(file, "gmsProjectFile", GmxFilename));
            options.AppendChild(_addXmlElement(file, "gridEnabled", "0"));

            //XmlElement resources = file.CreateElement("resources");
            /*foreach (string name in RegisteredResources)
            {
                resources.AppendChild(_addXmlElement(file, "resource", name));
            }*/

            /*XmlElement placeables = file.CreateElement("placeables");
            foreach (PlaceableElement elem in PlaceableList)
            {
                placeables.AppendChild(elem.toXml(file));
            }*/

            /*XmlElement rooms = file.CreateElement("rooms");
            foreach (MapRoom elem in RoomList)
            {
                rooms.AppendChild(elem.toXml(file));
                elem.saveRoomInstancesToXml();
            }*/

            XmlElement brushes = file.CreateElement("brushgroups");
            foreach (BrushGroup elem in BrushGroups)
            {
                brushes.AppendChild(elem.toXml(file));
            }

            XmlElement layers = file.CreateElement("layers");
            foreach (MapLayers layer in RoomLayers)
            {
                XmlElement elem = file.CreateElement("layer");
                elem.SetAttribute("name", layer.LayerName);
                elem.SetAttribute("depth", layer.LayerDepth.ToString());
                layers.AppendChild(elem);
            }

            assets.AppendChild(options);
            //assets.AppendChild(resources);
            //assets.AppendChild(placeables);
            //assets.AppendChild(rooms);
            assets.AppendChild(brushes);
            assets.AppendChild(layers);

            file.AppendChild(comment);
            file.AppendChild(assets);

            // now save script
            //List<string> lines = new List<string>(){ 
            //    "\n\n",
            //    "\t//env init",
            //    "\tglobal.envMap = ds_map_create();",
            //    "\n\t//id, nazwa, depth, solid, mask, wind, multidraw, shadow, shadowsize",
            //};
            //int counter = 1;
            //foreach (PlaceableElement elem in PlaceableList)
            //{
            //    lines.Add("\tscEnvMapAdd(" + counter.ToString() + ", " + elem.Sprite + ", " + elem.Depth.ToString() + ", 1, sprMask1, 0, 1, 0, 0);");
            //    counter++;
            //}
            //System.IO.File.WriteAllLines(ProjectSource + "\\amedata\\scEnvMapAdd.gml", lines);

            try
            {
                file.Save(ProjectSource + "\\" + ProjectFilename);
            }
            catch (Exception)
            {
                return false;
            }

            return true;
        }

        private XmlElement _addXmlElement(XmlDocument xml, string nodeName, string nodeValue)
        {
            XmlElement elem = xml.CreateElement(nodeName);
            elem.InnerText = nodeValue;
            return elem;
        }

        private string tryReadingNode(XmlNode n, string nodeName, string defaultValue)
        {
            try
            {
                return n.SelectSingleNode(nodeName).InnerText;
            }
            catch (Exception)
            {
                return defaultValue;
            }
        }

        private int tryReadingNode(XmlNode n, string nodeName, int defaultValue)
        {
            try
            {
                int.TryParse(n.SelectSingleNode(nodeName).InnerText, out defaultValue);
            }
            catch (Exception)
            {

            }

            return defaultValue;
        }

        private bool tryReadingNode(XmlNode n, string nodeName, bool defaultValue)
        {
            try
            {
                return (n.SelectSingleNode(nodeName).InnerText == "1") ? true : false;
            }
            catch (Exception)
            {
                return defaultValue;
            }
        }

        private void _readAME()
        {
            XmlDocument XMLfile = new XmlDocument();
            XMLfile.Load(ProjectSource + "\\" + ProjectFilename);

            XmlNode root = XMLfile.SelectSingleNode("assets/resources");

            #region to_remove
            /*foreach (XmlNode n in root)
            {
                addUsedRes(n.InnerText);
            }*/

            // don't use PlaceableElement definitions anymore, they are converted from Objects now
            /*try
            {
                root = XMLfile.SelectSingleNode("assets/placeables");
                foreach (XmlNode n in root)
                {
                    PlaceableElement e = new PlaceableElement()
                    {
                        Name = n.Attributes["name"].Value,
                        Sprite = n.SelectSingleNode("sprite").InnerText,
                        Mask = n.SelectSingleNode("mask").InnerText,
                        Depth = int.Parse(n.SelectSingleNode("depth").InnerText),
                        ShadowSize = int.Parse(n.SelectSingleNode("shadowsize").InnerText),
                        Solid = (n.SelectSingleNode("solid").InnerText == "1"),
                        Wind = (n.SelectSingleNode("wind").InnerText == "1"),
                        MultiDraw = (n.SelectSingleNode("multidraw").InnerText == "1"),
                        Shadow = (n.SelectSingleNode("shadow").InnerText == "1"),
                        Visible = (n.SelectSingleNode("visible").InnerText == "1") ? true : false,
                        Parent = tryReadingNode(n, "parent", ""),
                        useDefaultObjectDepth = tryReadingNode(n, "defdepth", false),
                        useDefaultObjectMask = tryReadingNode(n, "defmask", false),
                        useDefaultObjectSolid = tryReadingNode(n, "defsolid", false),
                        useDefaultObjectSprite = tryReadingNode(n, "defsprite", false),
                        useDefaultObjectVisible = tryReadingNode(n, "defvisible", false)
                    };

                    PlaceableList.Add(e);
                }
            }
            catch
            {

            }*/

            // read rooms
            /*try
            {
                root = XMLfile.SelectSingleNode("assets/rooms");
                foreach (XmlNode n in root)
                {
                    MapRoom map = new MapRoom()
                    {
                        Width = int.Parse(n.Attributes["width"].Value),
                        Height = int.Parse(n.Attributes["height"].Value),
                        LinkedWith = n.Attributes["linked"].Value,
                        LastUsedLayer = (n.Attributes["lastLayer"] == null) ? -1 : int.Parse(n.Attributes["lastLayer"].Value)//,
                        //InternalCounter = (n.Attributes["internalCounter"].Value == null) ? 0 : int.Parse(n.Attributes["internalCounter"].Value)
                    };

                    RoomList.Add(map);
                    _readAMERoom(map, ProjectSource + "\\amedata\\" + map.LinkedWith + ".room.ame");
                }
            }
            catch (Exception e)
            {
                MessageBox.Show("reading room node from AME file failed: " + e.Message);
            }*/
            #endregion

            // read brushes
            try
            {
                root = XMLfile.SelectSingleNode("assets/brushgroups");
                foreach (XmlNode n in root)
                {
                    string name = n.Attributes["name"].Value;
                    BrushGroup brush;
                    brush = BrushGroups.Where(item => item.GroupName == name).FirstOrDefault();
                    if (brush == null)
                    {
                        brush = new BrushGroup() { GroupName = name };
                        BrushGroups.Add(brush);
                    }

                    foreach (XmlNode obj in n.SelectSingleNode("objects"))
                    {
                        brush.objects.Add(obj.Attributes["name"].Value);
                    }
                }
            }
            catch (Exception e)
            {
                MessageBox.Show("Reading brush node from AME file failed: " + e.Message);
            }

            // read layers
            root = XMLfile.SelectSingleNode("assets/layers");
            foreach (XmlNode n in root)
            {
                RoomLayers.Add(new MapLayers()
                {
                    LayerDepth = int.Parse(n.Attributes["depth"].Value),
                    LayerName = n.Attributes["name"].Value
                });
            }
        }

        //private void _readAMERoom(MapRoom room, string path)
        //{
        //    XmlDocument XMLfile = new XmlDocument();
        //    XMLfile.Load(path);

        //    // instances
        //    XmlNode root = XMLfile.SelectSingleNode("assets/instances");

        //    foreach (XmlNode n in root)
        //    {
        //        //PlaceableElement pl = PlaceableList.Find(item => item.Name == n.Attributes["name"].Value);
        //        PlaceableElement pl = PlaceableList.Find(item => item.Name == n.Attributes["object"].Value);

        //        //foreach (PlaceableElement pl in PlaceableList)
        //        //{
        //        //if (pl.Name == n.Attributes["name"].Value)
        //        if (pl != null)
        //        {
        //            PlaceableInstance inst = new PlaceableInstance()
        //            {
        //                X = int.Parse(n.Attributes["x"].Value)/* - pl.offsetX*/,
        //                Y = int.Parse(n.Attributes["y"].Value)/* - pl.offsetY*/,
        //                Layer = int.Parse(n.Attributes["layer"].Value),
        //                Element = pl,
        //                Rotation = int.Parse(n.Attributes["rotate"].Value),
        //                ID = int.Parse(n.Attributes["id"].Value)
        //            };
        //            room.addInstance(inst);
        //            //break;
        //        }
        //        //}
        //    }

        //    /// ! moved to main project !
        //    // layers
        //    /*root = XMLfile.SelectSingleNode("assets/layers");
        //    foreach (XmlNode n in root)
        //    {
        //        room.Layers.Add(new MapLayers()
        //        {
        //            LayerDepth = int.Parse(n.Attributes["depth"].Value),
        //            LayerName = n.Attributes["name"].Value
        //        });
        //    }*/

        //    //room.Layers.Sort(MapLayers.SortByLayerDepth);
        //}

        public List<GmsResource> GmsResourceTree = new List<GmsResource>();
        public List<GmsSprite> GmsResourceSpriteList = new List<GmsSprite>() { (new GmsSprite(GmsResource.undefined){}) };
        public List<GmsBackground> GmsResourceBackgroundList = new List<GmsBackground>();
        public List<GmsObject> GmsResourceObjectList = new List<GmsObject>();
        public List<GmsRoom> GmsResourceRoomList = new List<GmsRoom>();

        private void _readGMX()
        {
            XmlDocument XMLfile = new XmlDocument();
            try
            {
                XMLfile.Load(ProjectSource + "\\" + GmxFilename);
            }
            catch (Exception e)
            {
                MessageBox.Show(e.Message);
                Manager.Project = null;
                return;
            }

            //string nodeElementsName;
            XmlNode root;
            //allItems = new GMItem(Path.GetFileNameWithoutExtension(Path.GetFileNameWithoutExtension(GmxFilename)));
            string[] resTree = new string[] { "sprites", "backgrounds", "scripts", "objects", "rooms" };

            // none sprite add
            //GMItem noneSprite = new GMItem(GmsResource.undefined) { ResourceType = GMItemType.Sprite, isGroup = false };
            //GMXSprites.Add(new GMSpriteData() { offsetX = 0, offsetY = 0, firstFramePath = "", owner = noneSprite });

            foreach (string resourceType in resTree)
            {
                try
                {
                    root = XMLfile.SelectSingleNode("assets/" + resourceType);

                    if (root == null)
                    {
                        continue;
                    }

                    GmsResourceGroup resource = new GmsResourceGroup(resourceType);

                    GmsResourceTree.Add(resource);

                    _readResourceTree(root, resourceType, resource);

                }
                catch (Exception e)
                {
                    MessageBox.Show("Not found NODE for resource type : " + resourceType + Environment.NewLine + e.Message + Environment.NewLine + e.StackTrace.ToString());
                }
            }


            //foreach (string nodeName in resTree)
            //{
            //    try
            //    {
            //        root = XMLfile.SelectSingleNode("assets/" + nodeName);

            //        if (root == null)
            //        {
            //            return;
            //        }

            //        nodeElementsName = nodeName;//root.Attributes["name"].InnerText;

            //        //TreeNode main = treeViewGMX.Nodes.Paint(fup(nodeElementsName), fup(nodeElementsName));

            //        //GMItem main = new GMItem(nodeElementsName);
            //        //allItems.add(main);

            //        _readSubNode(root, nodeName, nodeElementsName, main);
            //    }
            //    catch (Exception e)
            //    {
            //        MessageBox.Show(nodeName + ": " + e.Message);
            //    }
            //}

            BrushGroups = new ObservableCollection<BrushGroup>();
            BrushGroup defaultBrushGroup = new BrushGroup() { GroupName = "Default", isDefault = true };
            BrushGroups.Add(defaultBrushGroup);

            //List<string> objects = Manager.Project.renderItemsList("objects");
            //addUsedRes(GmsResource.undefined);

            //foreach (GMObjectData obj in GMXObjects)
            //{
            //    PlaceableElement el = new PlaceableElement()
            //    {
            //        Name = obj.Name,
            //        Sprite = (obj.sprite != null) ? obj.sprite.Name : GmsResource.undefined,
            //        Parent = "",
            //    };

            //    PlaceableList.Add(el);
            //    if (obj.sprite != null)
            //    {
            //        //addUsedRes(obj.sprite.Name);
            //    }
            //}

            // prepare rooms data

            root = XMLfile.SelectSingleNode("assets/rooms");
            if (root != null)
            {
                _readRoomsNode(root);
            }
        }

        private void _readResourceTree(XmlNode root, string resourceType, GmsResourceGroup parent)
        {
            foreach (XmlNode node in root)
            {
                if (node.Attributes["name"] != null)
                {
                    //group
                    GmsResourceGroup group = new GmsResourceGroup(node.Attributes["name"].InnerText);
                    _readResourceTree(node, resourceType, group);
                    parent.subitems.Add(group);
                }
                else
                {
                    GmsResource resource;
                    string name = Path.GetFileName(node.InnerText);

                    switch (resourceType)
                    {
                        case "sprites":
                            resource = new GmsSprite(name);
                            GmsResourceSpriteList.Add((GmsSprite)resource);
                            break;
                        case "backgrounds":
                            resource = new GmsBackground(name);
                            GmsResourceBackgroundList.Add((GmsBackground)resource);
                            break;
                        case "objects":
                            resource = new GmsObject(name);
                            GmsResourceObjectList.Add((GmsObject)resource);
                            break;
                        case "rooms":
                            resource = new GmsRoom(name);
                            GmsResourceRoomList.Add((GmsRoom)resource);
                            break;
                        default:
                            resource = new GmsResource(name);
                            break;
                    }

                    resource.name = Path.GetFileName(node.InnerText);
                    parent.subitems.Add(resource);
                }
            }
        }

        private void _readRoomsNode(XmlNode root)
        {
            foreach (XmlNode node in root)
            {
                if (node.Attributes["name"] != null)
                {
                    _readRoomsNode(node);
                }
                else
                {
                    GmsRoom room = GmsResourceRoomList.Find(n => n.name == node.InnerText.Replace("rooms\\", "").ToString());

                    if (room == null)
                    {
                        continue;
                    }

                    XmlDocument roomData = new XmlDocument();
                    roomData.Load(ProjectSource + "/" + node.InnerText + ".room.gmx");

                    room.width = Int32.Parse(roomData.SelectSingleNode("room/width").InnerText);
                    room.height = Int32.Parse(roomData.SelectSingleNode("room/height").InnerText);
                    string _name;

                    try
                    {
                        _name = roomData.SelectSingleNode("room/backgrounds/background").Attributes["name"].InnerText;
                        if (_name != "")
                        {
                            room.background = GmsResourceBackgroundList.Find(n => n.name == _name);
                        }
                    }
                    catch (Exception)
                    {
                    }

                    XmlNode _instances = roomData.SelectSingleNode("room/instances");

                    if (_instances.ChildNodes.Count > 0)
                    {
                        foreach (XmlNode inode in _instances)
                        {
                            try
                            {
                                GmsRoomInstance inst = new GmsRoomInstance();
                                {
                                    inst.objName = inode.Attributes["objName"].InnerText;
                                    inst.x = Int32.Parse(inode.Attributes["x"].InnerText, CultureInfo.InvariantCulture);
                                    inst.y = Int32.Parse(inode.Attributes["y"].InnerText, CultureInfo.InvariantCulture);
                                    inst.name = inode.Attributes["name"].InnerText;
                                    inst.locked = inode.Attributes["locked"].InnerText == "1" ? true : false;
                                    inst.code = inode.Attributes["code"].InnerText;
                                    inst.scaleX = float.Parse(inode.Attributes["scaleX"].InnerText, CultureInfo.InvariantCulture);
                                    inst.scaleY = float.Parse(inode.Attributes["scaleY"].InnerText, CultureInfo.InvariantCulture);
                                    inst.colour = UInt32.Parse(inode.Attributes["colour"].InnerText, CultureInfo.InvariantCulture);
                                    inst.rotation = float.Parse(inode.Attributes["rotation"].InnerText, CultureInfo.InvariantCulture);
                                    inst.instance_of = GmsResourceObjectList.Find(n => n.name == inode.Attributes["objName"].InnerText);
                                };
                                //inst.editor_data.Element = PlaceableList.Find(item => item.Name == inst.objName);
                                room.instances.Add(inst);
                            }
                            catch (Exception)
                            {
                                //MessageBox.Show(e.ToString() + " / " + ProjectSource + "/" + node.InnerText + ".room.gmx / " + inode.Attributes["name"].InnerText);
                            }
                        }
                    }

                    //GMRooms.Add(room);
                }
            }
        }

        //private void _readSubNode(XmlNode node, string nodeName, string nodeElementsName, GMItem main)
        //{
        //    foreach (XmlNode n in node)
        //    {
        //        if (n.Attributes["name"] != null)
        //        {
        //            // group
        //            //TreeNode sub = main.Nodes.Paint(n.Attributes["name"].InnerText);
        //            GMItem sub = new GMItem(n.Attributes["name"].InnerText);
        //            _readSubNode(n, nodeName, nodeElementsName, sub);
        //            main.add(sub);
        //        }
        //        else
        //        {
        //            //TreeNode sub = main.Nodes.Paint(n.InnerText, Path.GetFileName(n.InnerText));
        //            //sub.ImageIndex = sub.SelectedImageIndex = 1;
        //            //sub.ContextMenuStrip = contextMenuStrip2;
        //            string name = (nodeName == "scripts") ? /*n.InnerText*/ Path.GetFileName(n.InnerText) /*+ ".gml"*/ : Path.GetFileName(n.InnerText)/*n.InnerText + "." + n.Name + ".gmx"*/;
        //            GMItem sub = new GMItem(name, nodeName);
        //            main.add(sub);
        //        }
        //    }
        //}

        public void renderItemsTree(TreeView Tree)
        {
            renderItemsTree(Tree, false);
        }

        public void renderObjectsTree(ComboBox Dropdown)
        {
            Dropdown.Items.Clear();

            _renderObjectsForNode(Dropdown, Manager.Project.GmsResourceObjectList);

            Dropdown.SelectedIndex = Dropdown.Items.IndexOf(this.defaultPlaceable);
        }

        private void _renderObjectsForNode(ComboBox Dropdown, List<GmsObject> _node)
        {
            if (_node == null) return;

            foreach (GmsObject _object in _node/*.getSubitems()*/)
            {
                //if (_object.isGroup)
                //{
                //    _renderObjectsForNode(Dropdown, _object);
                //}
                //else
                //{
                    Dropdown.Items.Add(_object.name);
                //}
            }
        }

        public void renderItemsTree(TreeView Tree, bool skipNonProjectNodes)
        {
            Tree.Nodes.Clear();
            //TreeNode NodeGM = Tree.Nodes.Add("NodeGM", "Project: " + Manager.Project.GmxFilename);

            //if (skipNonProjectNodes == false)
            //{
            //    Tree.Nodes.Add("NodeInternal", "Internal Files");
            //}

            ////TreeNode t = treeViewGMX.Nodes["NodeGM"].Nodes.Paint(Manager.Project.allItems.Name);
            //Tree.ExpandAll();

            //if (skipNonProjectNodes == false)
            //{
            //    _treeAddGMItemGroup(NodeGM, Manager.Project.allItems.getSubitems());
            //}
            //else
            //{
            //    _treeAddGMItemGroup(NodeGM, new List<GMItem>() { Manager.Project.allItems.Find("sprites") });
            //    _treeAddGMItemGroup(NodeGM, new List<GMItem>() { Manager.Project.allItems.Find("backgrounds") });
            //}
        }

        public void renderItemsTree(TreeView Tree, string group)
        {
            Tree.Nodes.Clear();
            TreeNode NodeGM = Tree.Nodes.Add("NodeGM", "Project: " + Manager.Project.GmxFilename);

            //_treeAddGMItemGroup(NodeGM, new List<GMItem>() { Manager.Project.allItems.Find(group) });
        }

        public List<string> renderItemsList(string group)
        {
            List<string> list = new List<string>();
            //_renderItemList(list, Manager.Project.allItems.Find("objects"));
            return list;
        }

        //protected void _renderItemList(List<string> list, GMItem _node)
        //{
        //    if (_node == null) return;

        //    foreach (GMItem _object in _node.getSubitems())
        //    {
        //        if (_object.isGroup)
        //        {
        //            _renderItemList(list, _object);
        //        }
        //        else
        //        {
        //            list.Add(_object.Name);
        //        }
        //    }
        //}

        //private bool _treeAddGMItemGroup(TreeNode t, List<GMItem> items)
        //{
        //    bool anyChecked = false;

        //    foreach (GMItem item in items)
        //    {
        //        TreeNode newT = t.Nodes.Add(item.Name, item.Name);

        //        if (item.isGroup)
        //        {
        //            bool anySubChecked = false;
        //            newT.ImageIndex = 0;
        //            newT.SelectedImageIndex = 1;
        //            anySubChecked = _treeAddGMItemGroup(newT, item.getSubitems());
        //            // Tree node doesn't support indeterminade :(
        //            //if (anySubChecked)
        //            //{
        //            //    newT.Check
        //            //}
        //            anyChecked |= anySubChecked;
        //        }
        //        else
        //        {
        //            newT.ImageIndex = 3;
        //            switch (item.ResourceType)
        //            {
        //                case GMItemType.Background:
        //                case GMItemType.Sprite: newT.ImageIndex = 6; break;
        //                case GMItemType.Script: newT.ImageIndex = 5; break;
        //            }
        //            newT.SelectedImageIndex = newT.ImageIndex;
        //            if (item.used == GMItemUsage.used)
        //            {
        //                if (t.TreeView.CheckBoxes)
        //                {
        //                    newT.Checked = true;
        //                    anyChecked = true;
        //                }
        //                newT.StateImageIndex = 7;
        //            }
        //        }
        //    }

        //    return anyChecked;
        //}

        /*public void resetUsedRes()
        {
            RegisteredResources = new List<string>();
        }*/

        /*public void addUsedRes(string name)
        {
            if (RegisteredResources == null)
            {
                resetUsedRes();
            }


            //string spritePath = ProjectSource + "\\sprites\\images\\" + name + "_0.png";
            //if (File.Exists(spritePath))
            //{
            //    GraphicsManager.LoadTexture(new Bitmap(spritePath), RegisteredResources.Count);
            //}
            RegisteredResources.Add(name);
        }*/

        /*public void checkForRegisteredRes()
        {
            _checkForRegisteredRes(allItems.getSubitems());
        }

        private void _checkForRegisteredRes(List<GMItem> items)
        {
            foreach (GMItem item in items)
            {
                if (item.isGroup)
                {
                    _checkForRegisteredRes(item.getSubitems());
                }
                else
                {
                    if (RegisteredResources.IndexOf(item.Name) > -1)
                    {
                        item.used = GMItemUsage.used;
                    }
                    else { item.used = (item.used == GMItemUsage.used) ? GMItemUsage.disposed : GMItemUsage.unused; }
                }
            }
        }*/

        #region ENVinstances
        //public void addEnvDef(string name)
        //{
        //    PlaceableElement n = new PlaceableElement() { Name = name };
        //    PlaceableList.Add(n);
        //}

        public void regenerateEnvDefList()
        {
            ListBoxEx list = Manager.MainWindow.lbPlaceables;
            list.Items.Clear();
            //foreach (PlaceableElement elem in PlaceableList)
            //{
            //    list.Items.Add(elem.Name);
            //}
            foreach (GmsObject elem in GmsResourceObjectList)
            {
                list.Items.Add(elem.name);
            }


            Manager.MainWindow.statusLabelPlaceables.Text = GmsResourceObjectList.Count.ToString();
        }

        public void regenerateInstanceList()
        {
            if (Room == null) return;
            ListBoxEx list = Manager.MainWindow.lbInstances;
            list.Items.Clear();
            foreach (GmsRoomInstance instance in Room.instances)
            {
                list.Items.Add(instance.objName + ": " + instance.name);
            }
        }

        public void regenerateRoomList()
        {
            ListBoxEx list = Manager.MainWindow.lbRooms;
            list.Items.Clear();
            foreach (GmsRoom elem in GmsResourceRoomList)
            {
                list.Items.Add(elem.name);
            }
        }

        public void regenerateTextureList()
        {
            using (LoadingForm form = new LoadingForm())
            {
                form.Show();

                //GraphicsManager.DeleteTextures();

                int i = 0;

                //form.loadingBar.Maximum = this.GMXObjects.Count;
                form.loadingBar.Maximum = this.GmsResourceObjectList.Count;
                form.loadingBar.Value = 0;

                GraphicsManager.LoadTexture(GmsResource.undefined, new Bitmap(Manager.MainWindow.imageListObjects.Images[GmsResource.undefined]));

                //foreach (string file in RegisteredResources)
                // LOAD ONLY SPRITES ASSIGNED TO OBJECTS, SKIP ELSE
                //List<string> objects = renderItemsList("objects");
                foreach (GmsObject gmobject in this.GmsResourceObjectList)
                {
                    //GMSpriteData itm = this.GMXSprites.Find(item => item.Name == file);
                    //GMSpriteData itm = this.GMXObjects.Find(item => item.Name == gmobject).sprite;
                    GmsSprite itm = gmobject.sprite_index;

                    if (itm != null)
                    {
                        // prevent adding duplicates
                        if (!GraphicsManager.Sprites.ContainsKey(itm.name))
                        {
                            if (File.Exists(itm.image))
                            {
                                GraphicsManager.LoadTexture(itm.name, new Bitmap(itm.image));
                            }
                            else// if (itm.name == null)
                            {
                                GraphicsManager.LoadTexture(itm.name, new Bitmap(Manager.MainWindow.imageListObjects.Images[GmsResource.undefined]));
                            }
                        }

                        if (!Manager.MainWindow.imageListObjects.Images.ContainsKey(itm.name))
                        {
                            if (File.Exists(itm.image))
                            {
                                Manager.MainWindow.imageListObjects.Images.Add(itm.name, new Bitmap(itm.image));
                            }
                        }
                    }
                    //Manager.MainWindow.tsProgress.Value++;
                    form.loadingBar.Value++;
                    if (i % 10 == 0 || i == form.loadingBar.Maximum - 1)
                    {
                        form.Refresh();
                    }
                    i++;
                }

                foreach(GmsRoom r in this.GmsResourceRoomList) {

                    if (r.background != null && r.background.image != null)
                    {
                        string imgName = "@bg:" + r.background.name;

                        if (!GraphicsManager.Sprites.ContainsKey(imgName))
                        {
                            if (File.Exists(r.background.image))
                            {
                                GraphicsManager.LoadTexture(imgName, new Bitmap(r.background.image));
                            }
                        }
                    }

                }

                //foreach (PlaceableElement elem in PlaceableList)
                //{
                //    elem.textureId = elem.Sprite;
                //}

                form.Close();
            }

            /*using (LoadingForm form = new LoadingForm())
            {
                form.Show();

                List<string> objects = renderItemsList("objects");

                foreach (string gmobject in objects)
                {
                    //GMSpriteData itm = this.GMXSprites.Find(item => item.Name == file);
                    GMSpriteData itm = this.GMXObjects.Find(item => item.Name == gmobject).sprite;

                    if (itm != null)
                    {
                        // prevent adding duplicates
                        //if (!GraphicsManager.Sprites.ContainsKey(itm.Name))
						
                    }
                }

                form.Close();
            }*/
        }

        public void regenerateLayerList()
        {
            if (Room == null) return;

            //Room.Layers.Sort(MapLayers.SortByLayerDepth);
            RoomLayers = new ObservableCollection<MapLayers>(RoomLayers.OrderByDescending(x => x.LayerDepth));

            ToolStripComboBox tb = Manager.MainWindow.tbLayerDropDown;
            ListBoxEx lb = Manager.MainWindow.lbLayers;
            ToolStripDropDownButton td = Manager.MainWindow.tbEnabledLayersDropdown;

            tb.Items.Clear();
            lb.Items.Clear();
            td.DropDownItems.Clear();

            foreach (MapLayers layer in Room.Layers)
            {
                tb.Items.Add(layer.LayerName + " (" + layer.LayerDepth.ToString() + ")");
                lb.Items.Add(layer.LayerName);
                ToolStripMenuItem item = new ToolStripMenuItem()
                {
                    Text = layer.LayerName,
                    Checked = true,
                    CheckOnClick = true//,
                    //OwnerItem = tb
                };
                item.Click += new EventHandler(Manager.MainWindow.tbEnabledLayersDropdown_SubItemClick);
                td.DropDownItems.Add(item);
            }

            if (tb.Items.Count > 0)
            {
                tb.SelectedIndex = 0;
            }


        }

        public void regenerateBrushList()
        {
            foreach (BrushGroup group in BrushGroups)
            {
                ListView l = Manager.MainWindow.brushGroupList;
                ListViewGroup gr = l.Groups.Add(group.GroupName, group.GroupName);
                foreach (string name in group.objects)
                {
                    GmsSprite sprite = Manager.Project.GmsResourceObjectList.Find(item => item.name == name).sprite_index;
                    ListViewItem o = new ListViewItem() { Text = name, ImageKey = (sprite == null) ? GmsResource.undefined : sprite.name };
                    o.Group = gr;
                    l.Items.Add(o);
                }
            }
        }

        #endregion


    }
}
