using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Xml;
using System.Windows.Forms;
using System.Xml.Linq;
using MapEditor.Components;
using MapEditor.Graphics;
using System.Drawing;

namespace MapEditor.Common
{
	public class ProjectData
	{
		public string ProjectFilename = "";
		public string GmxFilename = "";
		public string ProjectSource = "";
		public bool Saved = false;
		public bool Loaded = false;
		public MapRoom Room = null;

		public List<PlacebleElement> PlaceableList = new List<PlacebleElement>();
		public List<PlaceableInstance> PlaceableInstances = new List<PlaceableInstance>();
		public List<EventElement> EventList = new List<EventElement>();
		public List<EventInstance> EventInstances = new List<EventInstance>();
		public List<MapRoom> RoomList = new List<MapRoom>();
		public List<string> RegisteredResources = new List<string>();
		public GMItem allItems = null;

		public ProjectData(string srcPath)
		{
			createNewProject(srcPath, false);
		}

		public ProjectData(string srcPath, bool load)
		{
			createNewProject(srcPath, load);
		}

		public bool createNewProject(string sourcePath, bool load)
		{
			resetUsedRes();
			ProjectSource = Path.GetDirectoryName(sourcePath);

			if (load)
			{
				ProjectFilename = Path.GetFileName(sourcePath);
				GmxFilename = Path.GetFileNameWithoutExtension(ProjectFilename) + ".gmx";
				_readAME();
				_readGMX();
				_checkForRegisteredRes(allItems.getSubitems());
			}
			else
			{
				GmxFilename = Path.GetFileName(sourcePath);
				ProjectFilename = Path.GetFileNameWithoutExtension(GmxFilename) + ".ame";
				_readGMX();
			}
			return true;
		}

		public bool saveProject()
		{
			string path;
			path = Path.GetDirectoryName(ProjectSource);

			XmlDocument file = new XmlDocument();
			XmlComment comment = file.CreateComment("This Document is generated by Almora Map Editor, if you edit it by hand then you do so at your own risk!");
			XmlElement assets = file.CreateElement("assets");
			XmlElement options = file.CreateElement("options");

			List<XmlElement> optionsElements = new List<XmlElement>();

			options.AppendChild(_addXmlElement(file, "gmsProjectFile", GmxFilename));
			options.AppendChild(_addXmlElement(file, "gridEnabled", "0"));

			XmlElement resources = file.CreateElement("resources");
			foreach (string name in RegisteredResources)
			{
				resources.AppendChild(_addXmlElement(file, "resource", name));
			}

			XmlElement placeables = file.CreateElement("placeables");
			foreach (PlacebleElement elem in PlaceableList)
			{
				placeables.AppendChild(elem.toXml(file));
			}

			XmlElement rooms = file.CreateElement("rooms");
			foreach (MapRoom elem in RoomList)
			{
				rooms.AppendChild(elem.toXml(file));
			}

			assets.AppendChild(options);
			assets.AppendChild(resources);
			assets.AppendChild(placeables);
			assets.AppendChild(rooms);

			file.AppendChild(comment);
			file.AppendChild(assets);

			try
			{
				file.Save(ProjectSource + "\\" + ProjectFilename);
			}
			catch (Exception e)
			{
				return false;
			}

			return true;
		}

		private XmlElement _addXmlElement(XmlDocument xml, string nodeName, string nodeValue)
		{
			XmlElement elem = xml.CreateElement(nodeName);
			elem.InnerText = nodeValue;
			return elem;
		}

		private void _readAME()
		{
			XmlDocument XMLfile = new XmlDocument();
			XMLfile.Load(ProjectSource + "\\" + ProjectFilename);

			XmlNode root = XMLfile.SelectSingleNode("assets/resources");

			foreach (XmlNode n in root)
			{
				addUsedRes(n.InnerText);
			}

			try
			{
				root = XMLfile.SelectSingleNode("assets/placeables");
				foreach (XmlNode n in root)
				{
					PlacebleElement e = new PlacebleElement()
					{
						Name = n.Attributes["name"].Value,
						Sprite = n.SelectSingleNode("sprite").InnerText,
						Mask = n.SelectSingleNode("mask").InnerText,
						Depth = int.Parse(n.SelectSingleNode("depth").InnerText),
						ShadowSize = int.Parse(n.SelectSingleNode("shadowsize").InnerText),
						Solid = (n.SelectSingleNode("solid").InnerText == "1"),
						Wind = (n.SelectSingleNode("wind").InnerText == "1"),
						MultiDraw = (n.SelectSingleNode("multidraw").InnerText == "1"),
						Shadow = (n.SelectSingleNode("shadow").InnerText == "1")
					};

					PlaceableList.Add(e);
				}
			}
			catch
			{

			}

			try
			{
				root = XMLfile.SelectSingleNode("assets/rooms");
				foreach (XmlNode n in root)
				{
					MapRoom e = new MapRoom()
					{
						Name = n.Attributes["name"].Value,
						Width = int.Parse(n.Attributes["width"].Value),
						Height = int.Parse(n.Attributes["height"].Value)
					};

					RoomList.Add(e);
				}
			}
			catch (Exception e)
			{
				MessageBox.Show(e.Message);
			}

			regenerateEnvDefList();
			regenerateRoomList();

		}

		private void _readGMX()
		{
			XmlDocument XMLfile = new XmlDocument();
			XMLfile.Load(ProjectSource + "\\" + GmxFilename);

			string nodeElementsName;
			XmlNode root;
			allItems = new GMItem(Path.GetFileNameWithoutExtension(Path.GetFileNameWithoutExtension(GmxFilename)));
			string[] resTree = new string[] { "sprites", "backgrounds", "scripts", "objects", "rooms" };


			foreach (string nodeName in resTree)
			{
				try
				{
					root = XMLfile.SelectSingleNode("assets/" + nodeName);

					if (root == null)
					{
						return;
					}

					nodeElementsName = nodeName;//root.Attributes["name"].InnerText;

					//TreeNode main = treeViewGMX.Nodes.Add(fup(nodeElementsName), fup(nodeElementsName));

					GMItem main = new GMItem(nodeElementsName);
					allItems.add(main);

					_readSubNode(root, nodeName, nodeElementsName, main);
				}
				catch (Exception e)
				{
					MessageBox.Show(nodeName + ": " + e.Message);
				}
			}
		}

		private void _readSubNode(XmlNode node, string nodeName, string nodeElementsName, GMItem main)
		{
			foreach (XmlNode n in node)
			{
				if (n.Attributes["name"] != null)
				{
					// group
					//TreeNode sub = main.Nodes.Add(n.Attributes["name"].InnerText);
					GMItem sub = new GMItem(n.Attributes["name"].InnerText);
					_readSubNode(n, nodeName, nodeElementsName, sub);
					main.add(sub);
				}
				else
				{
					//TreeNode sub = main.Nodes.Add(n.InnerText, Path.GetFileName(n.InnerText));
					//sub.ImageIndex = sub.SelectedImageIndex = 1;
					//sub.ContextMenuStrip = contextMenuStrip2;
					string name = (nodeName == "scripts") ? /*n.InnerText*/ Path.GetFileName(n.InnerText) /*+ ".gml"*/ : Path.GetFileName(n.InnerText)/*n.InnerText + "." + n.Name + ".gmx"*/;
					GMItem sub = new GMItem(name, nodeName);
					main.add(sub);
				}
			}
		}

		public void renderItemsTree(TreeView Tree)
		{
			renderItemsTree(Tree, false);
		}

		public void renderItemsTree(TreeView Tree, bool skipNonProjectNodes)
		{
			Tree.Nodes.Clear();
			TreeNode NodeGM = Tree.Nodes.Add("NodeGM", "Project: " + Manager.Project.GmxFilename);

			if (skipNonProjectNodes == false)
			{
				Tree.Nodes.Add("NodeInternal", "Internal Files");
			}

			//TreeNode t = treeViewGMX.Nodes["NodeGM"].Nodes.Add(Manager.Project.allItems.Name);
			Tree.ExpandAll();

			_treeAddGMItemGroup(NodeGM, Manager.Project.allItems.getSubitems());
		}

		private void _treeAddGMItemGroup(TreeNode t, List<GMItem> items)
		{
			foreach (GMItem item in items)
			{
				TreeNode newT = t.Nodes.Add(item.Name, item.Name);

				if (item.isGroup)
				{
					newT.ImageIndex = 0;
					newT.SelectedImageIndex = 1;
					_treeAddGMItemGroup(newT, item.getSubitems());
				}
				else
				{
					newT.ImageIndex = 3;
					switch (item.ResourceType)
					{
						case GMItemType.Background:
						case GMItemType.Sprite: newT.ImageIndex = 6; break;
						case GMItemType.Script: newT.ImageIndex = 5; break;
					}
					newT.SelectedImageIndex = newT.ImageIndex;
					if (item.used)
					{
						if (t.TreeView.CheckBoxes)
						{
							newT.Checked = true;
						}
						newT.StateImageIndex = 7;
					}
				}
			}
		}

		public void resetUsedRes()
		{
			RegisteredResources = new List<string>();
		}

		public void addUsedRes(string name)
		{
			if (RegisteredResources == null)
			{
				resetUsedRes();
			}


			string spritePath = ProjectSource + "\\sprites\\images\\" + name + "_0.png";
			if (File.Exists(spritePath))
			{
				GraphicsManager.LoadTexture(new Bitmap(spritePath), RegisteredResources.Count);
			}
			RegisteredResources.Add(name);
		}

		public void checkForRegisteredRes()
		{
			_checkForRegisteredRes(allItems.getSubitems());
		}

		private void _checkForRegisteredRes(List<GMItem> items)
		{
			foreach (GMItem item in items)
			{
				if (item.isGroup)
				{
					_checkForRegisteredRes(item.getSubitems());
				}
				else
				{
					if (RegisteredResources.IndexOf(item.Name) > -1)
					{
						item.used = true;
					}
					else { item.used = false; }
				}
			}
		}

		#region ENVinstances
		public void addEnvDef(string name)
		{
			PlacebleElement n = new PlacebleElement() { Name = name };
			PlaceableList.Add(n);
		}

		public void regenerateEnvDefList()
		{
			ListBoxEx list = Manager.MainWindow.lbPlaceables;
			{
				list.Items.Clear();
				foreach (PlacebleElement elem in PlaceableList)
				{
					list.Items.Add(elem.Name);
				}
			}

			Manager.MainWindow.statusLabelPlaceables.Text = PlaceableList.Count.ToString();
		}

		public void regenerateRoomList()
		{
			ListBoxEx list = Manager.MainWindow.lbRooms;
			{
				list.Items.Clear();
				foreach (MapRoom elem in RoomList)
				{
					list.Items.Add(elem.Name);
				}
			}
		}
		#endregion


	}
}
